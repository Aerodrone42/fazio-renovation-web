
name: Deploy to GitHub Pages

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout 🛎️
        uses: actions/checkout@v3

      - name: Setup Node.js ⚙️
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies 📦
        run: npm ci || npm install
        
      - name: Create critical files before build 📁
        run: |
          mkdir -p docs/assets
          echo "console.log('Application fallback chargée');" > docs/assets/index.js
          echo "Fichiers critiques créés"
          
      - name: Build 🔧
        run: npm run build
        env:
          NODE_ENV: production
          
      - name: Debug information 🧪
        run: |
          echo "Contents of docs directory:"
          ls -la docs/
          echo ""
          echo "Contents of docs/assets directory:"
          ls -la docs/assets/ || echo "Assets directory not found"
          
      - name: Create all required files 📄
        run: |
          # Garantir que le répertoire assets existe
          mkdir -p docs/assets
          
          # Créer un index.js de secours s'il n'existe pas
          if [ ! -f "docs/assets/index.js" ] || [ ! -s "docs/assets/index.js" ]; then
            echo "Creating fallback index.js"
            cat > docs/assets/index.js << 'EOL'
import React from 'react';
import { createRoot } from 'react-dom/client';
import App from '../src/App.tsx';

try {
  const rootElement = document.getElementById('root');
  if (rootElement) {
    createRoot(rootElement).render(React.createElement(App));
    console.log("Application chargée via index.js de secours");
  }
} catch (e) {
  console.error("Erreur lors du chargement:", e);
  document.getElementById('root').innerHTML = '<div style="padding:20px;"><h1>Erreur de chargement</h1><p>Impossible de charger l\'application.</p></div>';
}
EOL
          fi
          
          # Autres fichiers nécessaires
          echo "www.sarlfaziolorenzo.fr" > docs/CNAME
          touch docs/.nojekyll
          
          # Copier 404.html si nécessaire
          if [ -f "public/404.html" ]; then
            cp public/404.html docs/404.html
          fi
          
          # Vérifier l'existence de l'index.html et le créer si nécessaire
          if [ ! -f "docs/index.html" ]; then
            echo "Creating fallback index.html"
            cat > docs/index.html << 'EOL'
<!DOCTYPE html>
<html lang="fr">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>SARL FAZIO Lorenzo | Carrelage & rénovation</title>
    <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Playfair+Display:wght@400;500;600;700&family=Poppins:wght@300;400;500;600;700&display=swap">
    <script src="https://cdn.gpteng.co/gptengineer.js" type="module"></script>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="./assets/index.js"></script>
  </body>
</html>
EOL
          fi
          
      - name: Deploy to GitHub Pages 🚀
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          folder: docs
          branch: gh-pages
          clean: false
